from groq import Groq
from langchain_groq import ChatGroq
import streamlit as st
import streamlit as st
from docx import Document
from docx.shared import Pt
from docx.shared import Inches
from io import BytesIO
from langchain.vectorstores import Chroma
from langchain.embeddings import HuggingFaceEmbeddings

# Verificar que la clave de API se ha cargado
api_key= st.secrets.API_KEY
# Inicializar el cliente de Groq
client = Groq(api_key=api_key)

# Inicializar el modelo de chat
chat_groq = ChatGroq(model="llama-3.1-70b-versatile",api_key=api_key)
# Configurar la p√°gina
st.set_page_config(
    page_title="Microcurriculum UdeA con IA",
    page_icon="ü©∫",
    layout="centered",
    initial_sidebar_state="auto",
)

st.sidebar.image("UdeA+simplificado-01.png", width=200)
st.sidebar.title("Microcurriculum con IA")
st.sidebar.write("Entrega Diplomado Pedagog√≠a UdeA 2024-2")
st.sidebar.write("Alejandro Hern√°ndez-Arango, MD, MSc")

st.title("PROGRAMA OFICIAL DE CURSO")
st.write("Aplica para Pregrado y Posgrado")

def mejorar_texto_con_IA(var_name, var_value, vectordb_list, nombre_curso):
    context_docs = []
    search=var_name+"\n"+var_value
    for vectordb in vectordb_list:
        docs = vectordb.similarity_search(search, k=3)
        context_docs.extend([doc.page_content for doc in docs])
    context = "\n".join(context_docs)
    prompt = f"""Tu eres una inteligencia artificial experta en pedagogia. Tu tarea es mejorar el siguiente microcurriculum del curso {nombre_curso} texto en la secci√≥n {var_name} teniendo en cuenta el contexto proporcionado. Solo dame el texto mejorado

                Contexto:         
                {context}

                Texto:
                {var_value}

                Texto mejorado:"""
    improved_text = chat_groq.invoke(prompt)
    improved_text = improved_text.content
    return improved_text, context


# Funci√≥n para generar el documento
# Modifica la funci√≥n 'crear_documento' para aceptar 'variables' como par√°metro:
def crear_documento(nombre_curso, variables):
    doc = Document()
    
    # Insertar la imagen
    doc.add_picture("UdeA+simplificado-01.png", width=Inches(2))

    # Formato de T√≠tulos
    title_format = doc.add_paragraph().add_run("PROGRAMA OFICIAL DE CURSO\n(Pregrado y Posgrado)\nUNIVERSIDAD DE ANTIOQUIA")
    title_format.bold = True
    title_format.font.size = Pt(14)

    # Informaci√≥n General
    doc.add_paragraph("\nINFORMACI√ìN GENERAL")
    doc.add_paragraph(f"Nombre del curso: {nombre_curso}")
    doc.add_paragraph(f"Programa acad√©mico al que pertenece: {variables.get('programa_academico', '')}")
    doc.add_paragraph(f"Unidad acad√©mica: {variables.get('unidad_academica', '')}")
    doc.add_paragraph(f"Programa(s) en los cuales se ofrece el curso: {variables.get('programas_ofrece', '')}")
    doc.add_paragraph(f"Vigencia: {variables.get('vigencia', '')}")
    doc.add_paragraph(f"C√≥digo curso: {variables.get('codigo_curso', '')}")
    tipo_curso = variables.get('tipo_curso', '')
    tipo_curso_otro = variables.get('tipo_curso_otro', '')
    doc.add_paragraph(f"Tipo de curso: {tipo_curso if tipo_curso != 'Otro' else tipo_curso_otro}")
    caracteristicas_curso = variables.get('caracteristicas_curso', [])
    doc.add_paragraph(f"Caracter√≠sticas del curso: {', '.join(caracteristicas_curso)}")
    modalidad = variables.get('modalidad', '')
    modalidad_otra = variables.get('modalidad_otra', '')
    doc.add_paragraph(f"Modalidad educativa del curso: {modalidad if modalidad != 'Otra' else modalidad_otra}")
    doc.add_paragraph(f"Nombre del √°rea, n√∫cleo o componente: {variables.get('nombre_area', '')}")
    doc.add_paragraph(f"Prerrequisitos: {variables.get('prerrequisitos', '')}")
    doc.add_paragraph(f"Correquisitos: {variables.get('correquisitos', '')}")
    doc.add_paragraph(f"N√∫mero de cr√©ditos acad√©micos: {variables.get('num_creditos', '')}")
    doc.add_paragraph(f"Horas totales de interacci√≥n estudiante-profesor: {variables.get('horas_interaccion', '')}")
    doc.add_paragraph(f"Horas totales de trabajo independiente: {variables.get('horas_independiente', '')}")
    doc.add_paragraph(f"Horas totales del curso: {variables.get('horas_totales', '')}")
    doc.add_paragraph(f"Horas totales de actividades acad√©micas te√≥ricas: {variables.get('horas_teoricas', '')}")
    doc.add_paragraph(f"Horas totales de actividades acad√©micas pr√°cticas: {variables.get('horas_practicas', '')}")
    doc.add_paragraph(f"Horas totales de actividades acad√©micas te√≥rico-pr√°cticas: {variables.get('horas_teorico_practicas', '')}")

    # Relaciones con el perfil
    doc.add_paragraph("\nRELACIONES CON EL PERFIL")
    doc.add_paragraph(variables.get('relaciones_perfil', ''))

    # Intencionalidades formativas
    doc.add_paragraph("\nINTENCIONALIDADES FORMATIVAS")
    doc.add_paragraph(variables.get('intencionalidades', ''))

    # Aportes del curso
    doc.add_paragraph("\nAPORTES DEL CURSO A LA FORMACI√ìN INTEGRAL Y A LA FORMACI√ìN EN INVESTIGACI√ìN")
    doc.add_paragraph(variables.get('aportes_formacion', ''))

    # L√≠neas de sentido y derrotero de preguntas
    doc.add_paragraph("\nL√çNEAS DE SENTIDO Y DERROTERO DE PREGUNTAS")
    doc.add_paragraph(f"L√≠neas de sentido: {variables.get('lineas_sentido', '')}")
    doc.add_paragraph(f"Derrotero de preguntas: {variables.get('derrotero_preguntas', '')}")

    # Descripci√≥n de conocimientos
    doc.add_paragraph("\nDESCRIPCI√ìN DE LOS CONOCIMIENTOS Y/O SABERES")
    doc.add_paragraph(variables.get('descripcion_conocimientos', ''))

    # Metodolog√≠a
    doc.add_paragraph("\nMETODOLOG√çA")
    doc.add_paragraph(f"Estrategias did√°cticas: {variables.get('estrategias_didacticas', '')}")
    doc.add_paragraph(f"Metodolog√≠a: {variables.get('metodologia', '')}")
    doc.add_paragraph(f"Medios y recursos did√°cticos: {variables.get('medios_recursos', '')}")
    doc.add_paragraph(f"Formas de interacci√≥n: {variables.get('formas_interaccion', '')}")
    doc.add_paragraph(f"Estrategias de internacionalizaci√≥n: {variables.get('estrategias_internacionalizacion', '')}")
    doc.add_paragraph(f"Estrategias de diversidad: {variables.get('estrategias_diversidad', '')}")

    # Evaluaci√≥n
    doc.add_paragraph("\nEVALUACI√ìN")
    doc.add_paragraph(f"Concepci√≥n de evaluaci√≥n y modalidades: {variables.get('concepcion_evaluacion', '')}")
    doc.add_paragraph(f"Procesos de aprendizaje abordados: {variables.get('procesos_aprendizaje', '')}")
    doc.add_paragraph("Momentos de evaluaci√≥n y porcentajes:")
    doc.add_paragraph(variables.get('momentos_evaluacion', ''))

    # Bibliograf√≠a
    doc.add_paragraph("\nBIBLIOGRAF√çA Y OTRAS FUENTES")
    doc.add_paragraph(variables.get('bibliografia', ''))

    # Comunidad acad√©mica
    doc.add_paragraph("\nCOMUNIDAD ACAD√âMICA QUE PARTICIP√ì EN LA ELABORACI√ìN DEL MICROCURR√çCULO")
    doc.add_paragraph(f"Nombres y apellidos: {variables.get('nombres_apellidos', '')}")
    doc.add_paragraph(f"Unidad acad√©mica: {variables.get('unidad_academica_participantes', '')}")
    doc.add_paragraph(f"Formaci√≥n acad√©mica: {variables.get('formacion_academica', '')}")

    # Secci√≥n de aprobaci√≥n del Consejo de Unidad Acad√©mica
    doc.add_paragraph("\nAPROBACI√ìN DEL CONSEJO DE UNIDAD ACAD√âMICA").bold = True

    aprobacion_parrafo = doc.add_paragraph()
    aprobacion_parrafo.add_run("Aprobado en Acta n√∫mero ").bold = False
    aprobacion_parrafo.add_run("_______________").underline = True
    aprobacion_parrafo.add_run(" del ").bold = False
    aprobacion_parrafo.add_run("_______________").underline = True

    # Informaci√≥n del Secretario
    doc.add_paragraph("\nNombre completo del Secretario del Consejo de la Unidad Acad√©mica:")
    doc.add_paragraph("_________________________").underline = True  # L√≠nea para nombre del Secretario
    
    doc.add_paragraph("Firma:")
    doc.add_paragraph("_________________________").underline = True  # L√≠nea para la firma
    
    doc.add_paragraph("Cargo:")
    doc.add_paragraph("_________________________").underline = True  # L√≠nea para el cargo

    # Guardar el documento en un objeto de bytes
    doc_buffer = BytesIO()
    doc.save(doc_buffer)
    doc_buffer.seek(0)

    return doc_buffer




with st.expander("INFORMACI√ìN GENERAL"):
        nombre_curso = st.text_input("Nombre del curso:", value=st.session_state.get('nombre_curso', ''), key='nombre_curso')
        programa_academico = st.text_input("Programa acad√©mico al que pertenece:", value=st.session_state.get('programa_academico', ''), key='programa_academico')
        unidad_academica = st.text_input("Unidad acad√©mica:", value=st.session_state.get('unidad_academica', ''), key='unidad_academica')
        programas_ofrece = st.text_input("Programa(s) acad√©mico(s) en los cuales se ofrece el curso:", value=st.session_state.get('programas_ofrece', ''), key='programas_ofrece')
        vigencia = st.text_input("Vigencia (Periodo acad√©mico o Cohorte):", value=st.session_state.get('vigencia', ''), key='vigencia')
        codigo_curso = st.text_input("C√≥digo curso (en MARES):", value=st.session_state.get('codigo_curso', ''), key='codigo_curso')


        tipo_curso_options = ["Obligatorio", "Electivo", "Otro"]
        tipo_curso_index = tipo_curso_options.index(st.session_state.get('tipo_curso', 'Obligatorio'))
        tipo_curso = st.selectbox("Tipo de curso:", tipo_curso_options, index=tipo_curso_index, key='tipo_curso')
        if tipo_curso == "Otro":
            tipo_curso_otro = st.text_input("En caso de elegir 'Otro', indique cu√°l:", value=st.session_state.get('tipo_curso_otro', ''), key='tipo_curso_otro')
        else:
            tipo_curso_otro = ''

        caracteristicas_curso = st.multiselect(
            "Caracter√≠sticas del curso:",
            ["Validable", "Habilitable", "Clasificable", "Evaluaci√≥n de suficiencia (posgrado)"],
            default=st.session_state.get('caracteristicas_curso', []),
            key='caracteristicas_curso'
        )

        modalidad_options = ["Presencial", "Virtual", "Mixta", "Otra"]
        modalidad_index = modalidad_options.index(st.session_state.get('modalidad', 'Presencial'))
        modalidad = st.selectbox("Modalidad educativa del curso:", modalidad_options, index=modalidad_index, key='modalidad')
        if modalidad == "Otra":
            modalidad_otra = st.text_input("En caso de elegir 'Otra', indique cu√°l:", value=st.session_state.get('modalidad_otra', ''), key='modalidad_otra')
        else:
            modalidad_otra = ''

        nombre_area = st.text_input("Nombre del √°rea, n√∫cleo o componente de la organizaci√≥n curricular a la que pertenece el curso:", value=st.session_state.get('nombre_area', ''), key='nombre_area')

        prerrequisitos = st.text_area("Prerrequisitos (con nombre y c√≥digo en MARES):", value=st.session_state.get('prerrequisitos', ''), key='prerrequisitos')
        correquisitos = st.text_area("Correquisitos (con nombre y c√≥digo en MARES):", value=st.session_state.get('correquisitos', ''), key='correquisitos')

        num_creditos = st.number_input("N√∫mero de cr√©ditos acad√©micos (Acuerdo Acad√©mico 576 de marzo de 2021):", min_value=0, step=1, value=st.session_state.get('num_creditos', 0), key='num_creditos')
        horas_interaccion = st.number_input("Horas totales de interacci√≥n estudiante-profesor:", min_value=0, step=1, value=st.session_state.get('horas_interaccion', 0), key='horas_interaccion')
        horas_independiente = st.number_input("Horas totales de trabajo independiente:", min_value=0, step=1, value=st.session_state.get('horas_independiente', 0), key='horas_independiente')
        horas_totales = st.number_input("Horas totales del curso (suma de las horas anteriores):", min_value=0, step=1, value=st.session_state.get('horas_totales', 0), key='horas_totales')
        horas_teoricas = st.number_input("Horas totales de actividades acad√©micas te√≥ricas:", min_value=0, step=1, value=st.session_state.get('horas_teoricas', 0), key='horas_teoricas')
        horas_practicas = st.number_input("Horas totales de actividades acad√©micas pr√°cticas:", min_value=0, step=1, value=st.session_state.get('horas_practicas', 0), key='horas_practicas')
        horas_teorico_practicas = st.number_input("Horas totales de actividades acad√©micas te√≥rico-pr√°cticas:", min_value=0, step=1, value=st.session_state.get('horas_teorico_practicas', 0), key='horas_teorico_practicas')

# For 'relaciones_perfil'
with st.expander("RELACIONES CON EL PERFIL"):
    var_name = 'relaciones_perfil'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    relaciones_perfil = st.text_area(
        "Describir el prop√≥sito del curso en relaci√≥n con los perfiles del programa acad√©mico.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f'Mejorando {var_name} con IA...'):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, relaciones_perfil, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])
                                 
# For 'intencionalidades'
with st.expander("INTENCIONALIDADES FORMATIVAS"):
    var_name = 'intencionalidades'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    intencionalidades = st.text_area(
        "Explicitar los elementos orientadores del curso de acuerdo con el dise√±o curricular del programa acad√©mico.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f'Mejorando {var_name} con IA...'):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, intencionalidades, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])
                                 
# For 'aportes_formacion', 'lineas_sentido', 'derrotero_preguntas'
with st.expander("APORTES DEL CURSO A LA FORMACI√ìN INTEGRAL Y A LA FORMACI√ìN EN INVESTIGACI√ìN"):
    # 'aportes_formacion'
    var_name = 'aportes_formacion'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    aportes_formacion = st.text_area(
        "Describir c√≥mo el curso hace aportes a la formaci√≥n integral y a la formaci√≥n en investigaci√≥n.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, aportes_formacion, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'lineas_sentido'
    var_name = 'lineas_sentido'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    lineas_sentido = st.text_area(
        "L√≠neas de sentido",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, lineas_sentido, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'derrotero_preguntas'
    var_name = 'derrotero_preguntas'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    derrotero_preguntas = st.text_area(
        "Derrotero de preguntas",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, derrotero_preguntas, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])
                                 
# For 'descripcion_conocimientos'
with st.expander("DESCRIPCI√ìN DE LOS CONOCIMIENTOS Y/O SABERES"):
    var_name = 'descripcion_conocimientos'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    descripcion_conocimientos = st.text_area(
        "Explicitar los ejes probl√©micos, saberes, proyectos, contenidos o temas que se abordan en el desarrollo del curso.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, descripcion_conocimientos, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

# For 'metodologia' and others in "METODOLOG√çA"
with st.expander("METODOLOG√çA"):
    # Existing code for 'estrategias_didacticas' and others...
    estrategias_didacticas_options = [
        "Aprendizaje Basado en Problemas (ABP)",
        "Aprendizaje Basado en Proyectos (ABP)",
        "Aprendizaje invertido",
        "Aprendizaje Basado en Retos (ABR)",
        "Estudio de caso",
        "Aprendizaje entre pares",
        "Clase magistral",
        "Salida de campo",
        "Taller",
        "Otra(s)"
    ]
    estrategias_didacticas = st.multiselect("Estrategias did√°cticas:", estrategias_didacticas_options, default=st.session_state.get('estrategias_didacticas', []), key='estrategias_didacticas')
    if "Otra(s)" in estrategias_didacticas:
        estrategias_otras = st.text_input("Escriba el nombre de la estrategia.", value=st.session_state.get('estrategias_otras', ''), key='estrategias_otras')
    else:
        estrategias_otras = ''

    # 'metodologia'
    var_name = 'metodologia'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    metodologia = st.text_area(
        "Describa brevemente la metodolog√≠a(s) utilizada(s).",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, metodologia, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'medios_recursos'
    var_name = 'medios_recursos'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    medios_recursos = st.text_area(
        "Medios y recursos did√°cticos:",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, medios_recursos, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'formas_interaccion'
    var_name = 'formas_interaccion'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    formas_interaccion = st.text_area(
        "Formas de interacci√≥n en los ambientes de aprendizaje y de acompa√±amiento del trabajo independiente del estudiante:",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, formas_interaccion, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'estrategias_internacionalizacion'
    var_name = 'estrategias_internacionalizacion'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    estrategias_internacionalizacion = st.text_area(
        "Estrategias de internacionalizaci√≥n del curr√≠culo que se desarrollan para cumplir con las intencionalidades formativas del microcurr√≠culo:",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, estrategias_internacionalizacion, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # 'estrategias_diversidad'
    var_name = 'estrategias_diversidad'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    estrategias_diversidad = st.text_area(
        "Estrategias para abordar o visibilizar la diversidad desde la perspectiva de g√©nero, el enfoque diferencial o el enfoque intercultural:",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f"Mejorando {var_name} con IA..."):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, estrategias_diversidad, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                st.warning(e)
                pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

# For 'concepcion_evaluacion'
with st.expander("EVALUACI√ìN"):
    # Variable 'concepcion_evaluacion'
    var_name = 'concepcion_evaluacion'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    concepcion_evaluacion = st.text_area(
        "Concepci√≥n de evaluaci√≥n, modalidades y estrategias a trav√©s de las cuales se va a orientar.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f'Mejorando {var_name} con IA...'):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, concepcion_evaluacion, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                 st.warning(e)
                 pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # Variable 'procesos_aprendizaje'
    var_name = 'procesos_aprendizaje'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    procesos_aprendizaje = st.text_area(
        "Procesos y resultados de aprendizaje del Programa Acad√©mico que se abordan en el curso.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f'Mejorando {var_name} con IA...'):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, procesos_aprendizaje, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                 st.warning(e)
                 pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])

    # Variable 'momentos_evaluacion'
    var_name = 'momentos_evaluacion'
    var_value = st.session_state.get('improved_' + var_name, st.session_state.get(var_name, ''))
    momentos_evaluacion = st.text_area(
        "Momentos y/o productos de la evaluaci√≥n del curso y sus respectivos porcentajes.",
        value=var_value,
        key=var_name
    )
    if st.button("Mejorar con IA‚ú®", key='btn_' + var_name):
        with st.spinner(f'Mejorando {var_name} con IA...'):
            try:
                embeddings = HuggingFaceEmbeddings()
                vectordb_PEI = Chroma(persist_directory="./vector_db_PEI", embedding_function=embeddings)
                vectordb_guia = Chroma(persist_directory="./vector_db_guia", embedding_function=embeddings)
                vectordb_list = [vectordb_PEI, vectordb_guia]
                improved_text, context = mejorar_texto_con_IA(var_name, momentos_evaluacion, vectordb_list, nombre_curso)
                st.session_state['improved_' + var_name] = improved_text
                st.session_state['context_' + var_name] = context
                st.rerun()
            except Exception as e:
                 st.warning(e)
                 pass
    if 'context_' + var_name in st.session_state:
        st.warning("Fragmentos del PEI-UdeA usados por la IA")
        st.info(st.session_state['context_' + var_name])
                                 

with st.expander("BIBLIOGRAF√çA Y OTRAS FUENTES"):
        bibliografia = st.text_area("Incluir solo la bibliograf√≠a que se requiere para el desarrollo del curso.", value=st.session_state.get('bibliografia', ''), key='bibliografia')
with st.expander("COMUNIDAD ACAD√âMICA QUE PARTICIP√ì EN LA ELABORACI√ìN DEL MICROCURR√çCULO"):
        nombres_apellidos = st.text_area("Nombres y apellidos:", value=st.session_state.get('nombres_apellidos', ''), key='nombres_apellidos')
        unidad_academica_participantes = st.text_area("Unidad acad√©mica:", value=st.session_state.get('unidad_academica_participantes', ''), key='unidad_academica_participantes')
        formacion_academica = st.text_area("Formaci√≥n acad√©mica:", value=st.session_state.get('formacion_academica', ''), key='formacion_academica')
    


if st.button("Descargar Microcurriculum"):
    variables = st.session_state.to_dict()
    variables['estrategias_didacticas'] = ', '.join(variables.get('estrategias_didacticas', []))
    if "Otra(s)" in variables.get('estrategias_didacticas', '') and variables.get('estrategias_otras', ''):
        variables['estrategias_didacticas'] += f", {variables['estrategias_otras']}"
    doc_buffer = crear_documento(variables['nombre_curso'], variables)
    st.download_button(
        label="Descargar Microcurriculum",
        data=doc_buffer,
        file_name=f"Microcurriculum_{variables['nombre_curso']}.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

